name: Build Package and Create Docker Image

on:
  push:
    branches:
      - master
      - docker

env:
  IMAGE_NAME: docker_image
  test_var: ${{ false }}
  FILE_NAME: test

jobs:
  build:
    runs-on: ubuntu-16.04

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8

    - name: Build with var
      run: |
        mvn clean package --file docker-spring-boot/pom.xml
        FILE_NAME=$FILE_NAME-var-SNAPSHOT
        echo $FILE_NAME
      if: env.test_var == 'true'

    - name: Build without var
      run: |
        mvn clean package --file docker-spring-boot/pom.xml
        FILE_NAME=$FILE_NAME-SNAPSHOT
        echo $FILE_NAME
      if: env.test_var == 'false'

    - uses: actions/upload-artifact@v1
      with:
       name: spring-boot-web
       path: docker-spring-boot/target/
  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure build job passes before pushing image.
    needs: build

    runs-on: ubuntu-16.04
    if: github.event_name == 'push'

    steps:
      - uses: actions/checkout@v2

      - uses: actions/download-artifact@v1
        with:
          name: spring-boot-web
          path: docker-spring-boot/target/ 

      - name: Build image
        run: docker build . --file docker-spring-boot/Dockerfile --tag image

      - name: Log into registry
        run: echo "${{ secrets.GH_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME
          
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION
          echo 

          docker tag image $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
