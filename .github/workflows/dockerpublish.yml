name: Build Package and Create Docker Image

on:
  repository_dispatch:
    types: do-something

env:
  IMAGE_NAME: docker_image
  test_var: ${{ false }}
  FILE_NAME: spring-boot-web

jobs:
  build:
    runs-on: ubuntu-16.04

    steps:
    - name: Checkout
      uses: actions/checkout@v2
      with:
        ref: ${{ github.event.client_payload.ref }}
      
    - name: Set up JDK 1.8
      uses: actions/setup-java@v1
      with:
        java-version: 1.8
    - name: Do Something
      run: echo "Doing Something..."
        
    - name: Do Something Based On Triggered Event Data
      run: 'echo "Triggered event text: ${{ github.event.client_payload.hd3 }} ${{ github.event.client_payload.ref }}"'

    - name: Build with var
      run: |
        FILE_NAME=$FILE_NAME-var-$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')-SNAPSHOT
        echo $FILE_NAME
        mvn clean package --file docker-spring-boot/pom.xml
      if: github.event.client_payload.hd3 == 'true'

    - name: Build without var
      run: |
        FILE_NAME=$FILE_NAME-$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')-SNAPSHOT
        echo $FILE_NAME
        mvn clean package --file docker-spring-boot/pom.xml
      if: github.event.client_payload.hd3 == 'false'

    - uses: actions/upload-artifact@v1
      with:
       name: test 
       path: docker-spring-boot/target/
 
      #mvn deploy:deploy-file -Dfile=docker-spring-boot/target/spring-boot-web.jar
        #-Durl=https://maven.pkg.github.com/iGauravJoshi/docker-java
        #-Dpacking=jar
        #-DrepositoryId=github
  # Push image to GitHub Packages.
  # See also https://docs.docker.com/docker-hub/builds/
  push:
    # Ensure build job passes before pushing image.
    needs: build

    runs-on: ubuntu-16.04
    if: github.event_name == 'push'

    steps:
      - name: Build image
        run: docker build . --file docker-spring-boot/Dockerfile --tag image

      - name: Log into registry
        run: echo "${{ secrets.GH_TOKEN }}" | docker login docker.pkg.github.com -u ${{ github.actor }} --password-stdin

      - name: Push image
        run: |
          IMAGE_ID=docker.pkg.github.com/${{ github.repository }}/$IMAGE_NAME
          
          # Change all uppercase to lowercase
          IMAGE_ID=$(echo $IMAGE_ID | tr '[A-Z]' '[a-z]')

          # Strip git ref prefix from version
          VERSION=$(echo "${{ github.ref }}" | sed -e 's,.*/\(.*\),\1,')

          # Use Docker `latest` tag convention
          [ "$VERSION" == "master" ] && VERSION=latest

          echo IMAGE_ID=$IMAGE_ID
          echo VERSION=$VERSION

          docker tag image $IMAGE_ID:$VERSION
          docker push $IMAGE_ID:$VERSION
